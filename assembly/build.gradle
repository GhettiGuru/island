apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    namespace 'com.oasisfeng.island'
    compileSdk this.compileSdkVersion

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_PATH") ?: "keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    defaultConfig {
        applicationId "com.oasisfeng.island"
        minSdkVersion this.minSdkVersion
        targetSdkVersion 34
        resourceConfigurations += ['en', 'zh', 'zh-rTW', 'pt-rBR']
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildFeatures.dataBinding true

    buildTypes {
        debug {
            signingConfig signingConfigs.release  // ✅ Signed debug
            firebaseCrashlytics.mappingFileUploadEnabled false
        }
        release {
            signingConfig signingConfigs.release  // ✅ Signed release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
    // ... (your flavorDimensions, productFlavors, compileOptions, etc.)
}

    flavorDimensions += "packaging"
    flavorDimensions += "distribution"

    productFlavors {
        complete { dimension "packaging" }
        engine   { dimension "packaging" }  // Share application ID to retain the profile ownership when switching builds
        mobile   { dimension "packaging"; applicationIdSuffix ".mobile" }

        normal     { dimension "distribution" }
        googleplay { dimension "distribution" }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lint {
        checkOnly 'NewApi'
        abortOnError true
        checkReleaseBuilds false
        htmlReport false
        xmlReport false
        textReport true
        textOutput file('stdout')
    }

    repositories.flatDir {
        dirs '../app/libs'
    }
}

dependencies {
    // Complete
    completeImplementation project(':engine')
    completeImplementation project(':mobile')
    completeImplementation project(':installer')
    completeImplementation project(':watcher')
    completeImplementation project(':open')

    //debugImplementation project(':media')

    // Engine only
    engineImplementation project(':engine')
    // Mobile only
    mobileImplementation project(':mobile')
}
